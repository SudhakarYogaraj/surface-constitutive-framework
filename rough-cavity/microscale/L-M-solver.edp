load "UMFPACK64"

// Mesh resolution
int n=10;
// Interface refinement
int nIntf = 4;

// Height of the roughness elements
real hei = 0.5;

int numMicro=1;

// Box size
real ymin =-hei;
real ymax = 5.2;

// Problem indices
int indk = 1;
int indl = 2;

// Sampling rate of vertical distance unit length
int Nsamp = 60;

// Define location of the interface (0 = tip of the upper structure)
// Positive values - rising the interface
real intfShft = 0.5;

// Define geometry, top
border sqr1t(t=intfShft,ymax) {x= 0.5; y=t;        label=1; }
border sqr2t(t=0.5,-0.5)      {x=t;    y=ymax;     label=2; }
border sqr3t(t=ymax,intfShft) {x=-0.5; y=t;        label=3; }
border sqr4t(t=-0.5,0.5)      {x=t;    y=intfShft; label=4; }

// Define geometry, bottom
border sqr1b(t=ymin,intfShft)        {x= 0.5; y=t;               label=1; }  // right
border sqr2b(t=0.5,-0.5)             {x=t;    y=intfShft;        label=2; }  // top
border sqr3b(t=intfShft,ymin)        {x=-0.5; y=t;               label=3; }  // left
border sqr4b(t=-0.5,-0.5+0.5*hei)    {x=t;    y=ymin;            label=5; }  // bottom left
border sqr1c(t=ymin,ymin+hei)    {x=-0.5+0.5*hei;    y=t;    label=5; }  // cube left
border sqr2c(t=-0.5*hei,0.5*hei) {x=t;    y=0.0;             label=5; }  // cube top
border sqr3c(t=ymin+hei,ymin)    {x=0.5*hei;    y=t;         label=5; }  // cube right
border sqr5b(t=0.5*hei,0.5)          {x=t;    y=ymin;            label=4; }  // bottom right

// Define the upper part of the mesh
mesh ThT=buildmesh( sqr1t(n*2*(ymax-intfShft))+sqr2t(n*2)+sqr3t(n*2*(ymax-intfShft))+sqr4t(nIntf*n*2) );
// Define the lower part of the mesh
mesh ThB=buildmesh( sqr1b(n*2*(intfShft-ymin))+sqr2b(n*2*nIntf)+sqr3b(n*2*(intfShft-ymin))+sqr4b(n*20*(0.5-0.5*hei))
                   +sqr1c(hei*n*20)+sqr2c(hei*n*20)+sqr3c(hei*n*20)+sqr5b(n*20*(0.5-0.5*hei)));

// Define the mesh for Lagrangian multipliers (double the resolution)
int nL = 2*n;
mesh ThL=buildmesh( sqr1t(nL*2*(ymax-intfShft))+sqr2t(nL*2)+sqr3t(nL*2*(ymax-intfShft))+sqr4t(nIntf*nL*2) );
ThL = emptymesh(ThL);

// Display the generated mesh
plot(ThB,ThT);
// Display the Lagrangian mesh
// plot(ThL,wait=true);

// Define the corresponding FE spaces
fespace UUPhT(ThT,[P2,P2,P1],periodic=[[1,y],[3,y]]);
fespace UUPhB(ThB,[P2,P2,P1],periodic=[[1,y],[3,y]]);
// Space of Lagrangian multipliers (use combined FE space as well)
fespace UUPhL(ThL,[P1],      periodic=[[1,y],[3,y]]);

// Define FE functions later used for storing solutions
UUPhT [ut,vt,pt];
UUPhB [ub,vb,pb];

// Define variational formulations
// Fluid viscous and pressure part
varf lapT([u,v,p],[uu,vv,pp]) = int2d(ThT)( - (-p + 2.0*dx(u))*dx(uu) - (dy(u)+dx(v))*dy(uu)
                                            - (-p + 2.0*dy(v))*dy(vv) - (dx(v)+dy(u))*dx(vv)
                                            + (dx(u)+dy(v))*pp    );
varf lapB([u,v,p],[uu,vv,pp]) = int2d(ThB)( - (-p + 2.0*dx(u))*dx(uu) - (dy(u)+dx(v))*dy(uu)
                                            - (-p + 2.0*dy(v))*dy(vv) - (dx(v)+dy(u))*dx(vv)
                                            + (dx(u)+dy(v))*pp - 1e-10*p*pp   ) + on(4,5,u=0,v=0);


// Adding unknown stresses!
varf strT([u,v,p],[uu,vv,pp]) = int1d(ThT,2,4)( ( (-p+2*dx(u))*N.x + (dy(u)+dx(v))*N.y )*uu +
                                                ( (dx(v)+dy(u))*N.x + (-p+2*dy(v))*N.y )*vv );
varf strB([u,v,p],[uu,vv,pp]) = int1d(ThB,2  )( ( (-p+2*dx(u))*N.x + (dy(u)+dx(v))*N.y )*uu +
                                                ( (dx(v)+dy(u))*N.x + (-p+2*dy(v))*N.y )*vv );

// Adding stress jump at the interface
varf rhsvIntfSu ([empty],[bb]) = int1d(ThL,4)(-((indk==1)*(indl==1)*N.x+(indk==1)*(indl==2)*N.y)*bb );
varf rhsvIntfSv ([empty],[bb]) = int1d(ThL,4)(-((indk==2)*(indl==1)*N.x+(indk==2)*(indl==2)*N.y)*bb );

// Interpolation/boundary condition functions (at interface, label 4)
// Velocity and pressure continuity
varf intpIntfU ([u,v,p],[bb]) = int1d(ThL,4)( u*bb );
varf intpIntfUn([u,v,p],[bb]) = int1d(ThL,4)(-u*bb );
varf intpIntfV ([u,v,p],[bb]) = int1d(ThL,4)( v*bb );
varf intpIntfVn([u,v,p],[bb]) = int1d(ThL,4)(-v*bb );
// Stress boundary condition at the interface
varf intpIntfSu ([u,v,p],[bb]) = int1d(ThL,4)( ( (-p+2*dx(u))*N.x + (dy(u)+dx(v))*N.y )*bb );
varf intpIntfSun([u,v,p],[bb]) = int1d(ThL,4)(-( (-p+2*dx(u))*N.x + (dy(u)+dx(v))*N.y )*bb );
varf intpIntfSv ([u,v,p],[bb]) = int1d(ThL,4)( ( (dx(v)+dy(u))*N.x + (-p+2*dy(v))*N.y )*bb );
varf intpIntfSvn([u,v,p],[bb]) = int1d(ThL,4)(-( (dx(v)+dy(u))*N.x + (-p+2*dy(v))*N.y )*bb );
// Zero stress at the top boundary (label 2)
varf intpTopZSu ([u,v,p],[bb]) = int1d(ThL,2)( ( (-p+2*dx(u))*N.x + (dy(u)+dx(v))*N.y )*bb );
varf intpTopZSv ([u,v,p],[bb]) = int1d(ThL,2)( ( (dx(v)+dy(u))*N.x + (-p+2*dy(v))*N.y )*bb );
// Penalty for unused sides of Lagrangian mesh (labels 1,3 and 2 and 4)
varf intppenS   ([b],[bb])     = int1d(ThL,1,3)( -1e-10*b*bb );
varf intppenT   ([b],[bb])     = int1d(ThL,2)  ( -1e-10*b*bb );
varf intppenB   ([b],[bb])     = int1d(ThL,4)  ( -1e-10*b*bb );

// Construct the linear system
matrix CoupSYS;
{
    // Construct fluid sub-matrices
    matrix L1 = lapT(UUPhT,UUPhT); matrix L1s = strT(UUPhT,UUPhT);
    L1=L1+L1s;
    matrix L2 = lapB(UUPhB,UUPhB); matrix L2s = strB(UUPhB,UUPhB);
    L2=L2+L2s;
    // Construct boundary conditions on Lagrange multiplier space
    matrix B1 = intpIntfU (UUPhT,UUPhL); matrix B1n = intpIntfUn (UUPhB,UUPhL);
    matrix B2 = intpIntfV (UUPhT,UUPhL); matrix B2n = intpIntfVn (UUPhB,UUPhL);
    matrix B3 = intpIntfSu(UUPhT,UUPhL); matrix B3n = intpIntfSun(UUPhB,UUPhL);
    matrix B4 = intpIntfSv(UUPhT,UUPhL); matrix B4n = intpIntfSvn(UUPhB,UUPhL);
    matrix B5 = intpTopZSu(UUPhT,UUPhL);
    matrix B6 = intpTopZSv(UUPhT,UUPhL);
    matrix BPS= intppenS  (UUPhL,UUPhL); matrix BPT = intppenT(UUPhL,UUPhL);
    matrix BPB= intppenB  (UUPhL,UUPhL);
    BPT=BPT+BPS;
    BPB=BPB+BPS;

    CoupSYS = [ [ L1,  0,  B1', B2', B3', B4', B5', B6' ],
                [ 0,  L2,  B1n',B2n',B3n',B4n',0,   0   ],
                [ B1, B1n, BPT, 0,   0,   0,   0,   0   ],
                [ B2, B2n, 0,   BPT, 0,   0,   0,   0   ],
                [ B3, B3n, 0,   0,   BPT, 0,   0,   0   ],
                [ B4, B4n, 0,   0,   0,   BPT, 0,   0   ],
                [ B5, 0,   0,   0,   0,   0,   BPB, 0   ],
                [ B6, 0,   0,   0,   0,   0,   0,   BPB ] ];
}

// Construct the right hand side vector
real[int] RHS(UUPhT.ndof+UUPhB.ndof+6*UUPhL.ndof);
{
    RHS(0:UUPhT.ndof+UUPhB.ndof+6*UUPhL.ndof-1) = 0;
    RHS(UUPhT.ndof:UUPhT.ndof+UUPhB.ndof-1)     = lapB(0,UUPhB);
    RHS(UUPhT.ndof+UUPhB.ndof+2*UUPhL.ndof:UUPhT.ndof+UUPhB.ndof+3*UUPhL.ndof-1) = rhsvIntfSu(0, UUPhL);
    RHS(UUPhT.ndof+UUPhB.ndof+3*UUPhL.ndof:UUPhT.ndof+UUPhB.ndof+4*UUPhL.ndof-1) = rhsvIntfSv(0, UUPhL);
}

// Choose the direct solver, solve the system
set(CoupSYS, solver=sparsesolver);
real[int] SOL = CoupSYS^-1*RHS;

// Extract results
ut[] = SOL(0:UUPhT.ndof-1);
ub[] = SOL(UUPhT.ndof:UUPhT.ndof+UUPhB.ndof-1);

plot(ut,ub);

// Do integrals for boundary condition coefficients at the interface with the fluid
int  Nbox   = 50;
real dzstep = 1.0/Nbox;
real Fslice;
real[int] smpval(Nbox+1);
real tmpval = 0;
// The integral in the interface-normal direciton is carried out using trapezoidal rule
for(int i=0; i<Nbox+1; i++) smpval(i) = int1d(ThT,levelset=(y-ymax+1.0e-6+i*dzstep))( ut );
for(int i=0; i<Nbox; i++) tmpval = tmpval + 0.5*(smpval(i)+smpval(i+1))*dzstep;
real L1BL = tmpval;
tmpval = 0;
for(int i=0; i<Nbox+1; i++) smpval(i) = int1d(ThT,levelset=(y-ymax+1.0e-6+i*dzstep))( vt );
for(int i=0; i<Nbox; i++) tmpval = tmpval + 0.5*(smpval(i)+smpval(i+1))*dzstep;
real L2BL = tmpval;
tmpval = 0;
for(int i=0; i<Nbox+1; i++) smpval(i) = int1d(ThT,levelset=(y-ymax+1.0e-6+i*dzstep))( pt );
for(int i=0; i<Nbox; i++) tmpval = tmpval + 0.5*(smpval(i)+smpval(i+1))*dzstep;
real Bup = tmpval;
tmpval = 0;

if(intfShft-ymin<1.0) dzstep = (intfShft-ymin)/(Nbox);
real yvals;
for(int i=0; i<Nbox+1; i++)
{
    yvals=ymin+1.0e-6+i*dzstep;
    if(i==Nbox) yvals=ymin-1.0e-6+i*dzstep;
    smpval(i) = int1d(ThB,levelset=(y-yvals))( pb );
    Fslice    = int1d(ThB,levelset=(y-yvals))(1.0 );
    smpval(i) = smpval(i)/Fslice;
}
for(int i=0; i<Nbox; i++) tmpval = tmpval + 0.5*(smpval(i)+smpval(i+1))*dzstep;
real Bdn = tmpval;

// Computation of M coefficient
real M2121=0.0;
M2121=int1d(ThB,levelset=(x-0.4999))( ub );

cout << "yintf = " << intfShft << endl << "L112 = " << L1BL << ", M2121= " << M2121 << endl;

// Save the result in a txt file (yintf, L1kl, L2kl)
{
    ofstream resfile("2D_bound_cond_Li"+indk+indl+"_intf.txt",append);
    resfile << intfShft << " " << L1BL << endl;
}
// Sample the plane average results, adjust number of samples according to vertical height
Nsamp = Nsamp*(ymax-ymin);
real[int,int] PlaneUavg(5,Nsamp);
// Create plane average data
for (int i=0; i<Nsamp; i++){
    // Coordinate
    PlaneUavg(0,i) = ymin+1e-6 + i*(ymax-ymin-2e-6)/(Nsamp-1.0);

    // Integral using level set
    if(PlaneUavg(0,i) >= intfShft)
    {
        Fslice         = int1d(ThT,levelset=(y-PlaneUavg(0,i)))(1.0 );
        PlaneUavg(1,i) = int1d(ThT,levelset=(y-PlaneUavg(0,i)))( ut );
        PlaneUavg(2,i) = int1d(ThT,levelset=(y-PlaneUavg(0,i)))( vt );
        PlaneUavg(3,i) = int1d(ThT,levelset=(y-PlaneUavg(0,i)))( pt );
    }
    else
    {
        Fslice         = int1d(ThB,levelset=(y-PlaneUavg(0,i)))(1.0 );
        PlaneUavg(1,i) = int1d(ThB,levelset=(y-PlaneUavg(0,i)))( ub );
        PlaneUavg(2,i) = int1d(ThB,levelset=(y-PlaneUavg(0,i)))( vb );
        PlaneUavg(3,i) = int1d(ThB,levelset=(y-PlaneUavg(0,i)))( pb );
    }
    // Intrinsic plane average of pressure
    PlaneUavg(4,i) = PlaneUavg(3,i) / Fslice;
}

// Save the data to text file
{
    ofstream resfile("2D_bound_cond_L.txt");
    resfile << "# interface coord = " << intfShft << endl;
    resfile << "# y, <u>_y, <v>_y, <p>_y, <p>^i_y " << endl;
    for (int i=0; i<Nsamp; i++) resfile << PlaneUavg(0,i) << " " << PlaneUavg(1,i) << " " << PlaneUavg(2,i) << " " << PlaneUavg(3,i) << " " << PlaneUavg(4,i) << endl;
}



