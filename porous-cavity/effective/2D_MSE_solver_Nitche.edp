// ----------------------------------------------- COPYRIGHT --------------------------------------
// Copyright 2016
// Ugis Lacis, ugis.lacis@gmail.com
// Shervin Bagheri, shervin.bagheri@mech.kth.se
// -------------------------------------------- LICENSE LGPLv3 ------------------------------------
// This file is part of Porous_full_bc2ifScales.
//
// Porous_full_bc2ifScales is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Porous_full_bc2ifScales is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with Porous_full_bc2ifScales. If not, see <http://www.gnu.org/licenses/>.
// ---------------------------------------------- DESCRIPTION -------------------------------------
//
// This software is meant to be executed using FreeFem++. You should have recieved a copy
// of it along with Porous_full_bc2ifScales. If not, get it from <http://www.freefem.org/>.
//
// It has been tested to produce accurate results using FreeFem++ version 3.37.
//
// Execute this file by running "FreeFem++ 2D_MSE_solver.edp" in command line (Unix) or
// open it by graphical FreeFem++ dialogue (Windows).  For more detailed description, consult
// documentation in <doc/> and documentation of FreeFem++.

load "UMFPACK64"
load "Element_P3"

// Mesh resolution
int n=8;

// Parameter for Nitche's method, value of 1000 seems to be necessary for accuracy
real gamma = 000.0;
real ghinv = gamma*n;

// Scale separation parameter, solid volume fraction (setting cylinder radius) and problem name
real epsP      = 0.10;
real thetas    = 0.25;
real cylr      = sqrt(thetas/pi);
string caseFix = "test";
// Defining the lid velocity
real Udrv      =  100.0;

// Defining field sampling parameters
real xslice    = -1.0;
int  NsampU    =   60;   // Sampling rate of vertical distance unit length
int  Nsamp;

// Definition of interface coordinate and bc matrices (assuming y=0 at the tip of the last cylinder)
real yif = 0.0;
// Interior permeability
real K11= 0.0643045;
real K12= 0.0;
real K21= 0.0;
real K22= 0.0643045;

// Interface cell results, permeability
real ifK11=0.0476679;
real ifK12=0.0;
real ifK21=0.0;
real ifK22=0.0643045;

// Slip length
real L=0.303957;
// Coefficient to compute v
real M =-0.0509598;

// Delta_B to model pressure jump
real delB12=0.0;
real delB22=1.0;

// A terms to model pressure jump
real A1=0.0;
real A2=-2.33584;

// Set domain extent
real ymax =               1.0/epsP;
real ymin =                   -5.0;
real xmin =             - 0.5/epsP;
real xmax =               0.5/epsP;

// Define geometry, channel borders, free fluid
border sqr1(t=yif, ymax) {x=xmax; y=t;    label=1; }
border sqr2(t=xmax,xmin) {x=t;    y=ymax; label=2; }
border sqr3(t=ymax,yif ) {x=xmin; y=t;    label=3; }
border sqr4(t=xmin,xmax) {x=t;    y=yif;  label=4; }
// Channel borders, porous medium
border sqr1p(t=ymin, yif) {x=xmax; y=t;    label=1; }
border sqr2p(t=xmax,xmin) {x=t;    y=yif;  label=2; }
border sqr3p(t=yif, ymin) {x=xmin; y=t;    label=3; }
border sqr4p(t=xmin,xmax) {x=t;    y=ymin; label=4; }

cout << "R of cylinder: " << cylr << endl;

// Macros for more convinient desciption of variational formulation
macro epsilon(v1,v2) [dx(v1),dy(v2),(dy(v1)+dx(v2))/sqrt(2)] //
macro div(v1,v2) ( dx(v1)+dy(v2) ) //
// Macros for boundary stress components
macro fx(u,v,p) (  (-p+epsP*2*dx(u)      )*N.x + epsP*(     dy(u)+dx(v))*N.y  ) //
macro fy(u,v,p) (  epsP*(     dy(u)+dx(v))*N.x + (-p+epsP*2*dy(v)      )*N.y  ) //
// Macro for velocity boundary condition ubcF, vbcF -- evaluated at free fluid side, ubcP, vbcP - evaruated at porous side
macro ubcF() ( L*( dy(u)+dx(v) )) //

macro vbcF() ( M*(dxy(u)+dxx(v)) )//

//macro ubcP() (0.0) //
macro ubcP() ( -(K11*dx(p)+K12*dy(p))/epsP       ) //
macro vbcP() ( -(K21*dx(p)+K22*dy(p))/epsP       ) //

macro pbcF()(  epsP * (delB12*(dy(u)+dx(v))+delB22*2.0*dy(v)) ) //

macro pbcP() (A1 * dx(p) + A2 * dy(p) ) //

// Generate meshes
mesh ThT=buildmesh( sqr1 (   n*(ymax-yif))+sqr2 (   n*(xmax-xmin))
                   +sqr3 (   n*(ymax-yif))+sqr4 (   n*(xmax-xmin)) );
mesh ThB=buildmesh( sqr1p(   n*(yif-ymin))+sqr2p(   n*(xmax-xmin))
                   +sqr3p(   n*(yif-ymin))+sqr4p(   n*(xmax-xmin))  );

plot(ThT,ThB);

// Define FE spaces
fespace UUPhT(ThT,[P3,P3,P2]);
fespace   PhB(ThB,[P3]);

// Define the variational formulations, fluid part
varf lapT ([u,v,p],[uu,vv,pp]) = int2d(ThT)    ( p*div(uu,vv)-2*epsP*epsilon(u,v)'*epsilon(uu,vv)      // ( Dummy's comment)
                                               +pp*div(u ,v ) - 1e-10*p*pp ) + on(1,3,u=0,v=0) + on(2,u=Udrv,v=0);

// Surface integral at the free fluid interface, containing unknown quantities
//varf intfTu1([u,v,p],[uu,vv,pp]) = int1d(ThT,4)( fx(u,v,p)*uu + fy(u,v,p)*vv );
//varf intfTu2([u,v,p],[uu,vv,pp]) = int1d(ThT,4)( -(u-ubcF)*epsP*(N.x*dx(uu)+N.y*dy(uu)) + ghinv*(u-ubcF)*uu );
//varf intfTu3([u,v,p],[uu,vv,pp]) = int1d(ThT,4)( -(v-vbcF)*epsP*(N.x*dx(vv)+N.y*dy(vv)) + ghinv*(v-vbcF )*vv );

// Surface integral at the free fluid interface, containing "known" quantities
//varf intfTk2([p],[uu,vv,pp]) = int1d(ThT,4)( ubcP*epsP*(N.x*dx(uu)+N.y*dy(uu)) - ghinv*ubcP*uu );
//varf intfTk3([p],[uu,vv,pp]) = int1d(ThT,4)( vbcP*epsP*(N.x*dx(vv)+N.y*dy(vv)) - ghinv*vbcP*vv );

//==============================Stress formulation=======================================
// Surface integral at the free fluid interface, containing unknown quantities
varf intfTu1([u,v,p],[uu,vv,pp]) = int1d(ThT,4)( fx(u,v,p)*uu + fy(u,v,p)*vv );
varf intfTu2([u,v,p],[uu,vv,pp]) = int1d(ThT,4)( -(u-ubcF)*epsP*(N.x*2.0*dx(uu)+N.y*(dy(uu)+dx(vv)))+(u-ubcF)*pp*N.x + ghinv*(u-ubcF)*uu );
varf intfTu3([u,v,p],[uu,vv,pp]) = int1d(ThT,4)( -(v-vbcF)*epsP*(N.x*(dx(vv)+dy(uu))+2.0*N.y*dy(vv))+(v-vbcF)*pp*N.y + ghinv*(v-vbcF )*vv );

// Surface integral at the free fluid interface, containing "known" quantities
varf intfTk2([p],[uu,vv,pp]) = int1d(ThT,4)( ubcP*epsP*(N.x*2.0*dx(uu)+N.y*(dy(uu)+dx(vv)))-ubcP*pp*N.x- ghinv*ubcP*uu );
varf intfTk3([p],[uu,vv,pp]) = int1d(ThT,4)( vbcP*epsP*(N.x*(dx(vv)+dy(uu))+2.0*N.y*dy(vv))-vbcP*pp*N.y - ghinv*vbcP*vv );
//==============================Stress formulation (end)==================================

// Define variational formulations, porous part
varf lapB ([p],[pp]) = int2d(ThB)  ( (-K11*dx(p)-K12*dy(p))*dx(pp) - (K21*dx(p)+K22*dy(p))*dy(pp) );

// Surface integral at the porous interface, containing unknown quantities
varf intfBu([p],[pp]) = int1d(ThB,2)(  ((K11*dx(p)+K12*dy(p))*N.x+(K21*dx(p)+K22*dy(p))*N.y)*pp
                                      -(p-pbcP)*((K11*dx(pp)+K12*dy(pp))*N.x+(K21*dx(pp)+K22*dy(pp))*N.y)+ghinv*p*pp );

// Surface integral at the porous interface, containing "known" quantities
varf intfBk([u,v,p],[pp]) = int1d(ThB,2)( (p-pbcF)*((K11*dx(pp)+K12*dy(pp))*N.x+(K21*dx(pp)+K22*dy(pp))*N.y) - ghinv*p*pp  );



// Construct the linear system
matrix CoupSYSup;
{
    // Fluid part
    matrix LT   = lapT   (UUPhT,UUPhT);
    matrix LTs1 = intfTu1(UUPhT,UUPhT);
    matrix LTs2 = intfTu2(UUPhT,UUPhT);
    matrix LTs3 = intfTu3(UUPhT,UUPhT);
    LT=LT+LTs1+LTs2+LTs3;
    matrix B1 = intfTk2(PhB,UUPhT);
    matrix B1a= intfTk3(PhB,UUPhT);
    B1=B1+B1a;
        
    // Porous part
    matrix LB = lapB(PhB,PhB);     matrix LBs = intfBu(PhB,PhB);
    LB=LB+LBs;
    matrix B2 = intfBk(UUPhT,PhB);

    // Assemble the main matrix
    CoupSYSup = [ [ LT, B1 ],
                  [ B2, LB ] ];
}
// Construct the right hand side vector
real[int] RHSup(UUPhT.ndof+PhB.ndof);
{
    RHSup = 0;
    // Dirichlet boundary conditions
    RHSup(0:UUPhT.ndof-1)            = lapT(0,UUPhT);
}
// Choose the direct solver, solve the system
set(CoupSYSup, solver=sparsesolver);
real[int] SOLup = CoupSYSup^-1*RHSup;

UUPhT [u,v,p];
  PhB pb;
// Extract results
u[] = SOLup(0:UUPhT.ndof-1);
pb[]= SOLup(UUPhT.ndof:UUPhT.ndof+PhB.ndof-1);

// Save results
//savemesh(ThT,"2D_MSE_solver_Nitche_resultsT_"+caseFix+".msh");
//savemesh(ThB,"2D_MSE_solver_Nitche_resultsB_"+caseFix+".msh");
//{
//    ofstream resfileT("2D_MSE_solver_Nitche_resultsT_"+caseFix+".dat",binary);
//    resfileT<<u[];
//    ofstream resfileB("2D_MSE_solver_Nitche_resultsB_"+caseFix+".dat",binary);
//    resfileB<<pb[];
//}

// Post process results, output velocity results for given x coordinate
PhB ub, vb;
ub = -(K11*dx(pb) + K12*dy(pb) ) /epsP;
vb = -(K21*dx(pb) + K22*dy(pb) ) /epsP;

// Shift the pressure to report meaningful results
real pavgif = int1d(ThT,levelset=(y-yif-1e-6))( p )/(xmax-xmin);
cout << "Obtained average pressure at interface = " << pavgif << endl;
fespace PhT(ThT,[P1]);
PhT psh;
psh = p  - pavgif;
pb  = pb - pavgif;


// Sample a given vertical slice, output results to text file
Nsamp = NsampU*(ymax-ymin);
{
    real ysmp;
    ofstream resfileY("eps_y1.txt");
    resfileY << "# xmin = " << xmin << ", xmax = " << xmax << endl;
    resfileY << "# y, u, v, p, sampled at x = " << xslice << endl;
    for(int i=0; i<Nsamp; i++)
    {
        ysmp = ymin+1e-6 + i*(ymax-ymin-2e-6)/(Nsamp-1.0);
        if(ysmp > yif) resfileY << ysmp << " " << u (xslice,ysmp) << " " << v (xslice,ysmp) << " " << psh(xslice,ysmp) << endl;
        else           resfileY << ysmp << " " << ub(xslice,ysmp) << " " << vb(xslice,ysmp) << " " << pb (xslice,ysmp) << endl;
    }
}

// Sample a the interface (horizontal slice), output results to text file, including all derivatives
PhT dxp = dx(p), dyp = dy(p);
fespace UhT(ThT,[P2]);
UhT dxu = dx(u), dxv = dx(v), dyu = dy(u), dyv = dy(v);
Nsamp = NsampU*(xmax-xmin);
{
    real ysmp0 = yif+1e-6;
    real xsmp;
    ofstream resfileX("eps_x0.txt");
    resfileX << "# ymin = " << ymin << ", ymax = " << ymax << endl;
    resfileX << "# x, u, v, p, dxu, dxv, dyu, dyv, dxp, dyp,   line probe at y = " << ysmp0 << endl;
    for(int i=0; i<Nsamp; i++)
    {
        xsmp = xmin+1e-6 + i*(xmax-xmin-2e-6)/(Nsamp-1.00);

        resfileX << xsmp << " " << u  (xsmp,ysmp0) << " " << v  (xsmp,ysmp0) << " "
                                << psh(xsmp,ysmp0) << " " << dxu(xsmp,ysmp0) << " "
                                << dxv(xsmp,ysmp0) << " " << dyu(xsmp,ysmp0) << " "
                                << dyv(xsmp,ysmp0) << " " << dxp(xsmp,ysmp0) << " "
                                << dyp(xsmp,ysmp0) << endl;
    }
}

// Define the "jet" colorscheme, BUT - it is intensity incorrect (black & white prints look weird)
real[int] colorsJET = [
    6.666666666666666297e-01, 1.000000000000000000e+00, 8.333000000000000407e-01,
    6.666666666666666297e-01, 1.000000000000000000e+00, 1.000000000000000000e+00,
    6.388833333333332476e-01, 1.000000000000000000e+00, 1.000000000000000000e+00,
    6.111166666666666414e-01, 1.000000000000000000e+00, 1.000000000000000000e+00,
    5.833333333333332593e-01, 1.000000000000000000e+00, 1.000000000000000000e+00,
    5.555499999999999883e-01, 1.000000000000000000e+00, 1.000000000000000000e+00,
    5.277833333333332710e-01, 1.000000000000000000e+00, 1.000000000000000000e+00,
    5.000000000000000000e-01, 1.000000000000000000e+00, 1.000000000000000000e+00,
    4.666586663466538720e-01, 8.333000000000000407e-01, 1.000000000000000000e+00,
    4.166791660416978571e-01, 6.667000000000000703e-01, 1.000000000000000000e+00,
    3.333333333333333148e-01, 5.000000000000000000e-01, 1.000000000000000000e+00,
    2.499875006249687726e-01, 6.667000000000000703e-01, 1.000000000000000000e+00,
    2.000080003200127854e-01, 8.333000000000000407e-01, 1.000000000000000000e+00,
    1.666666666666666574e-01, 1.000000000000000000e+00, 1.000000000000000000e+00,
    1.388833333333333309e-01, 1.000000000000000000e+00, 1.000000000000000000e+00,
    1.111166666666666553e-01, 1.000000000000000000e+00, 1.000000000000000000e+00,
    8.333333333333332871e-02, 1.000000000000000000e+00, 1.000000000000000000e+00,
    5.554999999999999521e-02, 1.000000000000000000e+00, 1.000000000000000000e+00,
    2.778333333333333002e-02, 1.000000000000000000e+00, 1.000000000000000000e+00,
    0.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00,
    0.000000000000000000e+00, 1.000000000000000000e+00, 8.333000000000000407e-01
    ];
// Intesity-correct colorscheme
// Define the "cubehelix" colorscheme, Green-ish (https://www.mrao.cam.ac.uk/~dag/CUBEHELIX/cubetry.html)
real[int] colorsCUBE = [
    0.000000000000000000e+00, 0.000000000000000000e+00, 0.000000000000000000e+00,
    6.474926253687315336e-01, 7.902097902097902082e-01, 1.429999999999999882e-01,
    6.219336219336218941e-01, 8.587360594795538926e-01, 2.690000000000000169e-01,
    5.993217054263565435e-01, 9.197860962566843934e-01, 3.739999999999999991e-01,
    5.784313725490195512e-01, 9.714285714285714191e-01, 4.550000000000000155e-01,
    5.589192708333332593e-01, 1.000000000000000000e+00, 5.120000000000000107e-01,
    5.386029411764705621e-01, 1.000000000000000000e+00, 5.440000000000000391e-01,
    5.150421179302044905e-01, 1.000000000000000000e+00, 5.540000000000000480e-01,
    4.888888888888889284e-01, 1.000000000000000000e+00, 5.849999999999999645e-01,
    4.657464212678936732e-01, 9.878787878787879118e-01, 6.600000000000000311e-01,
    4.437840515106488692e-01, 9.257221458046767104e-01, 7.269999999999999796e-01,
    4.223227752639516774e-01, 8.467432950191571273e-01, 7.830000000000000293e-01,
    3.999999999999999667e-01, 7.539203860072376528e-01, 8.289999999999999591e-01,
    3.755952380952380931e-01, 6.481481481481482509e-01, 8.639999999999999902e-01,
    3.477192982456139836e-01, 5.337078651685394082e-01, 8.900000000000000133e-01,
    3.155186064924782041e-01, 4.631463146314631629e-01, 9.090000000000000302e-01,
    2.861552028218694588e-01, 4.095341278439869614e-01, 9.230000000000000426e-01,
    2.591397849462365732e-01, 3.311965811965812412e-01, 9.360000000000000542e-01,
    2.328767123287670826e-01, 2.305263157894736625e-01, 9.499999999999999556e-01,
    2.050147492625369328e-01, 1.164948453608247309e-01, 9.699999999999999734e-01,
    0.000000000000000000e+00, 0.000000000000000000e+00, 1.000000000000000000e+00
    ];


// Plot the obtained fields
plot(u  ,ub,nbiso=40,hsv=colorsJET,value=true,fill=true);
plot(v  ,vb,nbiso=40,hsv=colorsJET,value=true,fill=true);
plot(psh,pb,nbiso=40,hsv=colorsJET,value=true,fill=true);
plot(ub,nbiso=40,hsv=colorsJET,value=true,fill=true);
plot(vb,nbiso=40,hsv=colorsJET,value=true,fill=true);
plot(pb,nbiso=40,hsv=colorsJET,value=true,fill=true);
